#========================================================================
#========================================================================
#Pandas missing values
#
#========================================================================
#========================================================================

import scipy as sp
import pandas as pd
import numpy as np

#Define data

data = {'Name':pd.Series(['Apple','Xiaomi','Samsung','Google','Huawei','Sony','Jack']),
   'Founded':pd.Series([1981,1990,1998,1999,1981,1999,23]),
   'Rating':pd.Series([4.23,3.24,3.98,2.56,3.20,4.6,3.8]),
   'Gender':pd.Series(['Male',np.nan,np.nan,np.nan,np.nan,np.nan,'Female'])}

df1 = pd.DataFrame(data)
print df1
print " "
print " "

>>> df1

   Founded Gender     Name  Rating
0     1981   Male    Apple    4.23
1     1990    NaN   Xiaomi    3.24
2     1998    NaN  Samsung    3.98
3     1999    NaN   Google    2.56
4     1981    NaN   Huawei    3.20
5     1999    NaN     Sony    4.60
6       23   Male     Jack    3.80

#Check for any missing values on a column

>>> df1['Gender'].isnull()
0    False
1     True
2     True
3     True
4     True
5     True
6    False
Name: Gender, dtype: bool


>>> df1['Gender'].notnull()
0     True
1    False
2    False
3    False
4    False
5    False
6     True
Name: Gender, dtype: bool


#Replace missing value with previous or next values

>>> data = {'Name':pd.Series(['Apple','Xiaomi','Samsung','Google','Huawei','Sony','Jack']),
...    'Founded':pd.Series([1981,1990,1998,1999,1981,1999,23]),
...    'Rating':pd.Series([4.23,3.24,3.98,2.56,3.20,4.6,3.8]),
...    'Gender':pd.Series(['Male',np.nan,np.nan,np.nan,np.nan,np.nan,'Female'])}
>>>
>>> df1 = pd.DataFrame(data)
>>> print df1
   Founded  Gender     Name  Rating
0     1981    Male    Apple    4.23
1     1990     NaN   Xiaomi    3.24
2     1998     NaN  Samsung    3.98
3     1999     NaN   Google    2.56
4     1981     NaN   Huawei    3.20
5     1999     NaN     Sony    4.60
6       23  Female     Jack    3.80
>>>
>>> print df1.fillna(method='pad')
   Founded  Gender     Name  Rating
0     1981    Male    Apple    4.23
1     1990    Male   Xiaomi    3.24
2     1998    Male  Samsung    3.98
3     1999    Male   Google    2.56
4     1981    Male   Huawei    3.20
5     1999    Male     Sony    4.60
6       23  Female     Jack    3.80
>>> print df1.fillna(method='backfill')
   Founded  Gender     Name  Rating
0     1981    Male    Apple    4.23
1     1990  Female   Xiaomi    3.24
2     1998  Female  Samsung    3.98
3     1999  Female   Google    2.56
4     1981  Female   Huawei    3.20
5     1999  Female     Sony    4.60
6       23  Female     Jack    3.80
>>>

#Drop rows with missing values on any columns

>>> print df1
   Founded  Gender     Name  Rating
0     1981    Male    Apple    4.23
1     1990     NaN   Xiaomi    3.24
2     1998     NaN  Samsung    3.98
3     1999     NaN   Google    2.56
4     1981     NaN   Huawei    3.20
5     1999     NaN     Sony    4.60
6       23  Female     Jack    3.80


>>> print df1.dropna()
   Founded  Gender   Name  Rating
0     1981    Male  Apple    4.23
6       23  Female   Jack    3.80
>>>

data = {'Name':pd.Series([np.nan,'Xiaomi','Samsung','Google','Huawei','Sony','Jack']),
   'Founded':pd.Series([1981,1990,1998,1999,1981,1999,23]),
   'Rating':pd.Series([4.23,3.24,3.98,2.56,3.20,4.6,3.8]),
   'Gender':pd.Series(['Male',np.nan,np.nan,np.nan,np.nan,np.nan,'Female'])}

df1 = pd.DataFrame(data)
print df1
print " "
print " "




#Replace a value with anohter including Nan

>>> df1
   Founded  Gender     Name  Rating
0     1981    Male      NaN    4.23
1     1990     NaN   Xiaomi    3.24
2     1998     NaN  Samsung    3.98
3     1999     NaN   Google    2.56
4     1981     NaN   Huawei    3.20
5     1999     NaN     Sony    4.60
6       23  Female     Jack    3.80


print df1.replace({1981:10,23:60})

>>> print df1.replace({1981:10,23:60})
   Founded  Gender     Name  Rating
0       10    Male      NaN    4.23
1     1990     NaN   Xiaomi    3.24
2     1998     NaN  Samsung    3.98
3     1999     NaN   Google    2.56
4       10     NaN   Huawei    3.20
5     1999     NaN     Sony    4.60
6       60  Female     Jack    3.80



print df1.replace({np.nan:10,23:60})

>>> print df1.replace({np.nan:10,23:60})
   Founded  Gender     Name  Rating
0     1981    Male       10    4.23
1     1990      10   Xiaomi    3.24
2     1998      10  Samsung    3.98
3     1999      10   Google    2.56
4     1981      10   Huawei    3.20
5     1999      10     Sony    4.60
6       60  Female     Jack    3.80
